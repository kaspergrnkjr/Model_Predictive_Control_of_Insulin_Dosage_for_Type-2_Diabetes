%Simulation function:
function [X,time,Xsamp,Tsamp] = Simulation(obj,dTsamp)
if ~exist('dTsamp','var')
     % Default:
      dTsamp = obj.dt;
end
%% Simulation time: 
Nd=obj.Nd; %days
Nmin=obj.Nmin;
T=obj.T;

%% Define stress vector:
    %stressv=obj.StressD;
    StressT = obj.StressT; %Vector of stress events times
    StressType = obj.StressType; %Stress events types corresponeding to
    %the events times provided as a cell array.
%% Define Heart rate vector:
    %HRv=obj.HRdD+obj.Param.HRb*ones(1,length(T));
    HRT = obj.HRT; %Vector of heart rate events times
    HRType = obj.HRType; %Type of evenets corresponeding to
    %the events times provided as a cell array.

%% Define Long-acting and Fast-acting insulin doses:
%     Ulat=obj.Ula.Time; %time minutes for doses (begining of each day).
%     Ufat=obj.Ufa.Time; 
    %Amount of doses:
    Ula=obj.UlaD*1e2; %In units.
    Ufa=obj.UfaD*1e2; %In units.
%% Define Metformin doses:
%     Umt = obj.Um.Time;
%Amount of doses:
    Um = obj.UmD*1e3;

%% Define GLP-a agonists doses: 
%Amount of doses:
    UGLP1h2 = obj.UGLP1h2; %In mg
    UGLP1h24 = obj.UGLP1h24; %In mg
%% Define Vildagliptin doses:
%     Uvt=obj.Uv.Time;
    Uv=obj.UvD*(1/(303.406)*10^6); %From mg to nmol 
%% Define meals:
%     Dgt = obj.Dgt.Time;
    Dg = obj.MealD*1000/2;


    DgH = obj.MealDH*1000;

    
    DgM = obj.MealDM*1000;


    DgL = obj.MealDL*1000;

    DgvL = obj.MealDvL*1000;

    if (DgvL(1)==0 && DgL(1)==0 && DgM(1)==0 && DgH(1)==0 && Dg(1)==0)
        something = 1; 
    else
        something = 0;
    end

    DgA = DgvL + DgL + DgM + DgH + Dg;
%% Define states and initialize:
    
% %Define the parameters of the model:
%     param=param_def();

%Time moments to stop:
Tstop=[T(1) T(DgA>0) T(Ula>0) T(Ufa>0) T(Um>0) T(Uv>0) T(UGLP1h2>0) ...
    T(UGLP1h24>0) StressT HRT T(end)];
Tstop=unique(Tstop);
Xstop=zeros(73,length(Tstop));
Xstop(:,1)=obj.X0;
time=0; %Time vector.
Tsamp = 0;
X=[]; %State vector:
X=obj.X0;
Xsamp = X;
G = zeros(size(X));
G(35) = obj.Param.sig_diff;
bas = obj.basal;
para = struct(obj.Param);
para = cell2mat(struct2cell(para)); 
bas = cell2mat(struct2cell(bas));
HRb = obj.Param.HRb; 
funcode = @(t, x, LastMeal,Stress, HR, T,para, bas) fode(obj,t, x', LastMeal,Stress, HR, T,para, bas);
for i=2:length(Tstop)
    
   if(something==1 && i==2 && obj.CLmode == 0)
       DM=1;
   elseif (i==2 && obj.CLmode == 1 && DgA(Tstop(i-1)+1)==0)
       DM=0;
   elseif not(DgA(Tstop(i-1)+1)==0)
       DM=X(47,end)+DgA(Tstop(i-1)+1)-X(48,end);
   else
       DM = 0;
   end
   
   if (i==2 && obj.CLmode == 0)
       obj.LastMeal = DgA(Tstop(i-1)+1);
   elseif not(DgA(Tstop(i-1)+1)==0)
       obj.LastMeal = DgA(Tstop(i-1)+1);
   end
   LastMeal = obj.LastMeal;
   %Impulse inputs:
   Xstop([1 58 61 64 67 47 48 4 5 10 18 20 70 72],i-1)=[Dg(Tstop(i-1)+1);DgH(Tstop(i-1)+1);DgM(Tstop(i-1)+1);DgL(Tstop(i-1)+1);DgvL(Tstop(i-1)+1);DgA(Tstop(i-1)+1); 0.0000001; Um(Tstop(i-1)+1);Um(Tstop(i-1)+1);...
       Uv(Tstop(i-1)+1); Ufa(Tstop(i-1)+1)/6.76; Ula(Tstop(i-1)+1)/6.76; UGLP1h2(Tstop(i-1)+1); UGLP1h24(Tstop(i-1)+1) ]...
       +Xstop([1 58 61 64 67 47 48 4 5 10 18 20 70 72],i-1);
   %Stress:
%    if(ismember(Tstop(i-1),StressT))
%        Stress = @(t) 0;%  StressType{Tstop(i-1)==StressT}(t,Tstop(i-1));
%    end
   if(ismember(Tstop(i-1),HRT))
       HR = @(t) HRType{Tstop(i-1)==HRT}(t,Tstop(i-1))+obj.Param.HRb;
   end
   Stress = @(t) 0;
   %HR = @(t) HRb; %removed them to make it faster
   %Simulate:
   options  = odeset('RelTol',1e-3,'AbsTol',1e-3,'Jacobian', @(t,x) jacobian_fode_pot(obj,t,x, LastMeal, Stress, HR, T,...
      para, bas),'JConstant','no','Vectorized','on');
   %options  = odeset('RelTol',1e-3,'AbsTol',1e-3,'Vectorized','on','Refine',1);
   tic
   sol = ode15s_sde(@(t,x) fode(obj,t, x', LastMeal,Stress, HR, T,...
       para, bas),G, [Tstop(i-1) Tstop(i)],Xstop(:,i-1),options);
   Xs = sol.y;
   ts = sol.x;
   tsa = Tstop(i-1):dTsamp:Tstop(i);
   Xsa = deval(sol,tsa);
   Xsamp = [Xsamp,Xsa(:,2:end)];
   Tsamp = [Tsamp,tsa(2:end)];
   Xs=Xs;
   X=[X,Xs(:,2:end)];
   Xstop(:,i)=Xs(:,end);
   ttoc=toc;
   time=[time,ts(2:end)];
   options.InitialStep = ts(end)-ts(end-4);
%     disp(['Progress: |',repmat('#',1,round(time(end)/(Nmin-1)*10)),...
%         repmat(' ',1,10-round(time(end)/(Nmin-1)*10)),'| ',...
%         num2str(time(end)/(Nmin-1)*100),'%']);
%     if(ttoc>=60 && ttoc<5*60)
%         disp("It is taking some time. It's ok.");
%     elseif(ttoc>=5*60 && ttoc<10*60)
%         disp("This is taking more time than it should...So how's the weather?")
%     elseif (ttoc>=10*60 && ttoc<15*60)
%         disp("It took too much time. You can make some coffee or tea while it's running")
%     elseif(ttoc>=15*60)
%         disp("It took too much time. Something is probably wrong. Glucose is unstable or negative. Stop the simulation")
%     end
end
obj.time = time;
    %Save states:
    %Glucose absorption model: 
    XT.qss=X(1,:); XT.qsl=X(2,:); XT.qint=X(3,:);
    XT.De=X(47,:); XT.DNq=X(48,:);    

    %Glucose absorption model (High G.I.)
    XT.qssGIH=X(58,:); XT.qslGIH=X(59,:); XT.qintGIH=X(60,:);

    %Glucose absorption model (Meduim G.I.)
    XT.qssGIM=X(61,:); XT.qslGIM=X(62,:); XT.qintGIM=X(63,:);

    %Glucose absorption model (Lowe G.I.)
    XT.qssGIL=X(64,:); XT.qslGIL=X(65,:); XT.qintGIL=X(66,:);

    %Glucose absorption model (Very low G.I.)
    XT.qssGIvL=X(67,:); XT.qslGIvL=X(68,:); XT.qintGIvL=X(69,:);


    %Metformin submodel:
    XT.MO1=X(4,:); XT.MO2=X(5,:); XT.MGl=X(6,:); XT.MGW=X(7,:); XT.ML=X(8,:);
    XT.MP=X(9,:);

    %Vildagliptin submodel: 
    XT.AG1=X(10,:); XT.AG2=X(11,:); XT.Ac=X(12,:); XT.Ap=X(13,:); XT.DRc=X(14,:);
    XT.DRp=X(15,:);
    
    %Physical activity model:
    XT.E1=X(16,:); XT.E2=X(17,:);
    XT.TE=X(49,:);
    %Fast acting insulin:
    XT.Hfa=X(18,:); XT.Dfa=X(19,:);
    XT.Ifa = X(56,:);
    %Long acting insulin:
    XT.Bla=X(20,:); XT.Hla=X(21,:); XT.Dla=X(22,:);
    XT.Ila = X(55,:);
    %Pancreas submodel
    XT.mpan=X(23,:); XT.P=X(24,:); XT.R=X(25,:);
    
    %Insulin submodel:
    XT.IB=X(26,:);   XT.IH=X(27,:); XT.IG=X(28,:); XT.IL=X(29,:); XT.IK=X(30,:);
    XT.IPC=X(31,:); XT.IPF=X(32,:);

    %Glucose submodel:
    XT.GBC=X(33,:); XT.GBF=X(34,:); XT.GH=X(35,:); XT.GG=X(36,:); XT.GL=X(37,:);...
    XT.GK=X(38,:);  XT.GPC=X(39,:); XT.GPF=X(40,:); XT.GHint = X(57,:);
    
    %Glucagon submodel:
    XT.Gamma=X(41,:);
    
    %GLP-1 submodel:    
    XT.phi=X(42,:); XT.PSI=X(43,:);
    
    %GLP-1 agonists: 

    %Exenatide
    XT.psih2 = X(70,:); XT.PSIh2 = X(71,:); 
    %Semaglutide
    XT.psih24 = X(72,:); XT.PSIh24 = X(73,:); 

    %rates:
    XT.MIHGP=X(44,:);
    XT.fr=X(45,:);
    XT.MIHGU=X(46,:);
    
    %Total glucose consumption: 
    XT.XGC = X(50,:);
    %Total Glucose production and appearance: 
    XT.XGP = X(51,:);
    %Total insulin consumption: 
    XT.XIC = X(52,:);
    %Secreted inuslin: 
    XT.XIS = X(53,:);
    %Injected insulin: 
    XT.XIinj = X(54,:);
    obj.X=XT;
    obj.Xend = X(:,end);
%% Plotting:
%plotting;